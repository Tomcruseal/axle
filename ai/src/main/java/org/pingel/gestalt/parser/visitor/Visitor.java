//
// Generated by JTB 1.2.2
//

package org.pingel.gestalt.parser.visitor;
import org.pingel.gestalt.parser.syntaxtree.Application;
import org.pingel.gestalt.parser.syntaxtree.Expression;
import org.pingel.gestalt.parser.syntaxtree.Form;
import org.pingel.gestalt.parser.syntaxtree.GSystem;
import org.pingel.gestalt.parser.syntaxtree.Goal;
import org.pingel.gestalt.parser.syntaxtree.Identifier;
import org.pingel.gestalt.parser.syntaxtree.Include;
import org.pingel.gestalt.parser.syntaxtree.NodeList;
import org.pingel.gestalt.parser.syntaxtree.NodeListOptional;
import org.pingel.gestalt.parser.syntaxtree.NodeOptional;
import org.pingel.gestalt.parser.syntaxtree.NodeSequence;
import org.pingel.gestalt.parser.syntaxtree.NodeToken;
import org.pingel.gestalt.parser.syntaxtree.Path;
import org.pingel.gestalt.parser.syntaxtree.Statement;
import org.pingel.gestalt.parser.syntaxtree.Substitution;
import org.pingel.gestalt.parser.syntaxtree.Transform;

/**
 * All void visitors must implement this interface.
 */
public interface Visitor {
   //
   // void Auto class visitors
   //
   public void visit(NodeList n);
   public void visit(NodeListOptional n);
   public void visit(NodeOptional n);
   public void visit(NodeSequence n);
   public void visit(NodeToken n);

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ( Statement() )*
    * f1 -> <EOF>
    */
   public void visit(Goal n);

   /**
    * f0 -> Transform()
    *       | GSystem()
    *       | Form()
    *       | Include()
    */
   public void visit(Statement n);

   /**
    * f0 -> "include"
    * f1 -> Identifier()
    */
   public void visit(Include n);

   /**
    * f0 -> "transform"
    * f1 -> Identifier()
    * f2 -> Identifier()
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( Substitution() )*
    * f6 -> "}"
    * f7 -> ( "$" Identifier() )?
    */
   public void visit(Transform n);

   /**
    * f0 -> Identifier()
    * f1 -> "/"
    * f2 -> Identifier()
    */
   public void visit(Substitution n);

   /**
    * f0 -> "system"
    * f1 -> Identifier()
    * f2 -> Identifier()
    * f3 -> "{"
    * f4 -> ( Application() )*
    * f5 -> "}"
    * f6 -> "<"
    * f7 -> ( Identifier() )*
    * f8 -> ">"
    */
   public void visit(GSystem n);

   /**
    * f0 -> "apply"
    * f1 -> Identifier()
    * f2 -> Identifier()
    * f3 -> ( Path() )?
    * f4 -> Identifier()
    */
   public void visit(Application n);

   /**
    * f0 -> "form"
    * f1 -> Identifier()
    * f2 -> "["
    * f3 -> ( Identifier() )*
    * f4 -> "]"
    * f5 -> Expression()
    */
   public void visit(Form n);

   /**
    * f0 -> Identifier()
    *       | "(" Expression() Expression() ")"
    */
   public void visit(Expression n);

   /**
    * f0 -> <PATH>
    */
   public void visit(Path n);

   /**
    * f0 -> <IDENTIFIER>
    */
   public void visit(Identifier n);

}

