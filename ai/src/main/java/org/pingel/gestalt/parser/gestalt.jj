options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(GestaltParser)
  package org.pingel.gestalt.parser;

  public class GestaltParser {}
PARSER_END(GestaltParser)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN : 
{
  < LANGBRACKET: "<" >
| < RANGBRACKET: ">" >
| < LSQPAREN: "[" >
| < RSQPAREN: "]" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < DOT: "." >
| < SLASH: "/" >
| < DOLLAR: "$" >
| < SYSTEM: "system" >
| < TRANSFORM: "transform" >
| < FORM: "form" >
| < APPLY: "apply" >
| < INCLUDE: "include" >
}

TOKEN : 
{
  < PATH: "." (<PATHELEM>)+ >
|
  < #PATHELEM: ["r", "l"] >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: (<LETTER>|<DIGIT>)+ >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/************************************
 * The Gestalt Grammar Starts Here *
 ************************************/

void Goal() :
{}
{
  ( Statement() )*
  <EOF>
}

void Statement() :
{}
{
  Transform() | GSystem() | Form() | Include()
}

void Include() :
{}
{
  "include" Identifier()
}

void Transform() :
{}
{
  // the cost identifier should be digits only !!!

  "transform" Identifier() Identifier() Identifier()
  "{" ( Substitution() )* "}"
  ( "$" Identifier() )?
}

void Substitution() :
{}
{
  Identifier() "/" Identifier()
}

void GSystem() :
{}
{
  "system" Identifier() Identifier()
  "{" ( Application() )* "}"
  "<" ( Identifier() )* ">"
}

void Application() :
{}
{
  "apply" Identifier() Identifier() ( Path() )? Identifier()
}

void Form() :
{}
{
  // this expression parsing in't getting the recursive structure !!!

  "form" Identifier() "[" ( Identifier() )* "]" Expression()
}

void Expression() :
{}
{
  Identifier()
| "(" Expression() Expression() ")"

}

void Path() :
{}
{
  <PATH>
}

void Identifier() :
{}
{
  <IDENTIFIER>
}
