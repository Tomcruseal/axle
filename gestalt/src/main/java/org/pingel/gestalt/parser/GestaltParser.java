/* Generated By:JavaCC: Do not edit this line. GestaltParser.java */
package org.pingel.gestalt.parser;

import org.pingel.gestalt.parser.syntaxtree.Application;
import org.pingel.gestalt.parser.syntaxtree.Expression;
import org.pingel.gestalt.parser.syntaxtree.Form;
import org.pingel.gestalt.parser.syntaxtree.GSystem;
import org.pingel.gestalt.parser.syntaxtree.Goal;
import org.pingel.gestalt.parser.syntaxtree.Identifier;
import org.pingel.gestalt.parser.syntaxtree.Include;
import org.pingel.gestalt.parser.syntaxtree.NodeChoice;
import org.pingel.gestalt.parser.syntaxtree.NodeListOptional;
import org.pingel.gestalt.parser.syntaxtree.NodeOptional;
import org.pingel.gestalt.parser.syntaxtree.NodeSequence;
import org.pingel.gestalt.parser.syntaxtree.NodeToken;
import org.pingel.gestalt.parser.syntaxtree.Path;
import org.pingel.gestalt.parser.syntaxtree.Statement;
import org.pingel.gestalt.parser.syntaxtree.Substitution;
import org.pingel.gestalt.parser.syntaxtree.Transform;


public class GestaltParser implements GestaltParserConstants {

  static final public Goal Goal() throws ParseException {
   NodeListOptional n0 = new NodeListOptional();
   Statement n1;
   NodeToken n2;
   Token n3;

   {
   }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SYSTEM:
      case TRANSFORM:
      case FORM:
      case INCLUDE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      n1 = Statement();
        n0.addNode(n1);
    }
     n0.nodes.trimToSize();
    n3 = jj_consume_token(0);
      n3.beginColumn++; n3.endColumn++;
      n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new Goal(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public Statement Statement() throws ParseException {
   NodeChoice n0;
   Transform n1;
   GSystem n2;
   Form n3;
   Include n4;

   {
   }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRANSFORM:
      n1 = Transform();
        n0 = new NodeChoice(n1, 0);
      break;
    case SYSTEM:
      n2 = GSystem();
        n0 = new NodeChoice(n2, 1);
      break;
    case FORM:
      n3 = Form();
        n0 = new NodeChoice(n3, 2);
      break;
    case INCLUDE:
      n4 = Include();
        n0 = new NodeChoice(n4, 3);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Statement(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Include Include() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;

   {
   }
    n1 = jj_consume_token(INCLUDE);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
     {if (true) return new Include(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public Transform Transform() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   Identifier n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeListOptional n7 = new NodeListOptional();
   Substitution n8;
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   Identifier n15;

   {
   }
    n1 = jj_consume_token(TRANSFORM);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n3 = Identifier();
    n4 = Identifier();
    n6 = jj_consume_token(LBRACE);
            n5 = JTBToolkit.makeNodeToken(n6);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      n8 = Substitution();
        n7.addNode(n8);
    }
     n7.nodes.trimToSize();
    n10 = jj_consume_token(RBRACE);
             n9 = JTBToolkit.makeNodeToken(n10);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOLLAR:
        n12 = new NodeSequence(2);
      n14 = jj_consume_token(DOLLAR);
                n13 = JTBToolkit.makeNodeToken(n14);
        n12.addNode(n13);
      n15 = Identifier();
        n12.addNode(n15);
        n11.addNode(n12);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
     {if (true) return new Transform(n0,n2,n3,n4,n5,n7,n9,n11);}
    throw new Error("Missing return statement in function");
  }

  static final public Substitution Substitution() throws ParseException {
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;

   {
   }
    n0 = Identifier();
    n2 = jj_consume_token(SLASH);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Identifier();
     {if (true) return new Substitution(n0,n1,n3);}
    throw new Error("Missing return statement in function");
  }

  static final public GSystem GSystem() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   NodeListOptional n6 = new NodeListOptional();
   Application n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeListOptional n12 = new NodeListOptional();
   Identifier n13;
   NodeToken n14;
   Token n15;

   {
   }
    n1 = jj_consume_token(SYSTEM);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n3 = Identifier();
    n5 = jj_consume_token(LBRACE);
            n4 = JTBToolkit.makeNodeToken(n5);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case APPLY:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      n7 = Application();
        n6.addNode(n7);
    }
     n6.nodes.trimToSize();
    n9 = jj_consume_token(RBRACE);
            n8 = JTBToolkit.makeNodeToken(n9);
    n11 = jj_consume_token(LANGBRACKET);
             n10 = JTBToolkit.makeNodeToken(n11);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      n13 = Identifier();
        n12.addNode(n13);
    }
     n12.nodes.trimToSize();
    n15 = jj_consume_token(RANGBRACKET);
             n14 = JTBToolkit.makeNodeToken(n15);
     {if (true) return new GSystem(n0,n2,n3,n4,n6,n8,n10,n12,n14);}
    throw new Error("Missing return statement in function");
  }

  static final public Application Application() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   Identifier n3;
   NodeOptional n4 = new NodeOptional();
   Path n5;
   Identifier n6;

   {
   }
    n1 = jj_consume_token(APPLY);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n3 = Identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PATH:
      n5 = Path();
        n4.addNode(n5);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    n6 = Identifier();
     {if (true) return new Application(n0,n2,n3,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  static final public Form Form() throws ParseException {
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeListOptional n5 = new NodeListOptional();
   Identifier n6;
   NodeToken n7;
   Token n8;
   Expression n9;

   {
   }
    n1 = jj_consume_token(FORM);
               n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Identifier();
    n4 = jj_consume_token(LSQPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      n6 = Identifier();
        n5.addNode(n6);
    }
     n5.nodes.trimToSize();
    n8 = jj_consume_token(RSQPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
    n9 = Expression();
     {if (true) return new Form(n0,n2,n3,n5,n7,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public Expression Expression() throws ParseException {
   NodeChoice n0;
   Identifier n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Expression n5;
   Expression n6;
   NodeToken n7;
   Token n8;

   {
   }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n1 = Identifier();
        n0 = new NodeChoice(n1, 0);
      break;
    case 28:
        n2 = new NodeSequence(4);
      n4 = jj_consume_token(28);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Expression();
        n2.addNode(n5);
      n6 = Expression();
        n2.addNode(n6);
      n8 = jj_consume_token(29);
               n7 = JTBToolkit.makeNodeToken(n8);
        n2.addNode(n7);
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Expression(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Path Path() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(PATH);
               n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Path(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public Identifier Identifier() throws ParseException {
   NodeToken n0;
   Token n1;

   {
   }
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new Identifier(n0);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  static public GestaltParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x5c0000,0x5c0000,0x2000000,0x20000,0x200000,0x2000000,0x800000,0x2000000,0x12000000,};
   }

  public GestaltParser(java.io.InputStream stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new GestaltParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  public GestaltParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new GestaltParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  public GestaltParser(GestaltParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  public void ReInit(GestaltParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[30];
    for (int i = 0; i < 30; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 30; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
