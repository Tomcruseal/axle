//
// Generated by JTB 1.2.2
//

options {
   JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(GestaltParser)
package org.pingel.gestalt.parser;

import syntaxtree.*;
import java.util.Vector;


public class GestaltParser 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(GestaltParser)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

SPECIAL_TOKEN :
{
   <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
   | <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
   | <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*", "/"] (~["*"])* "*"))* "/">
}

TOKEN :
{
   <LANGBRACKET: "<">
   | <RANGBRACKET: ">">
   | <LSQPAREN: "[">
   | <RSQPAREN: "]">
   | <LBRACE: "{">
   | <RBRACE: "}">
   | <DOT: ".">
   | <SLASH: "/">
   | <DOLLAR: "$">
   | <SYSTEM: "system">
   | <TRANSFORM: "transform">
   | <FORM: "form">
   | <APPLY: "apply">
   | <INCLUDE: "include">
}

TOKEN :
{
   <PATH: "." (<PATHELEM>)+>
   | <#PATHELEM: ["r", "l"]>
}

TOKEN :
{
   <IDENTIFIER: (<LETTER> | <DIGIT>)+>
   | <#LETTER: ["$", "A"-"Z", "_", "a"-"z", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff"]>
   | <#DIGIT: ["0"-"9", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"]>
}

Goal Goal() :
{
   NodeListOptional n0 = new NodeListOptional();
   Statement n1;
   NodeToken n2;
   Token n3;

   {
   }
}
{
   (
      n1=Statement()
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   n3=<EOF> { 
      n3.beginColumn++; n3.endColumn++;
      n2 = JTBToolkit.makeNodeToken(n3);
   }
   
   { return new Goal(n0,n2); }
}

Statement Statement() :
{
   NodeChoice n0;
   Transform n1;
   GSystem n2;
   Form n3;
   Include n4;

   {
   }
}
{
   (
      n1=Transform()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=GSystem()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=Form()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=Include()
      { n0 = new NodeChoice(n4, 3); }
   )
   
   { return new Statement(n0); }
}

Include Include() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;

   {
   }
}
{
   n1="include" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   
   { return new Include(n0,n2); }
}

Transform Transform() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   Identifier n3;
   Identifier n4;
   NodeToken n5;
   Token n6;
   NodeListOptional n7 = new NodeListOptional();
   Substitution n8;
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   NodeSequence n12;
   NodeToken n13;
   Token n14;
   Identifier n15;

   {
   }
}
{
   n1="transform" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n3=Identifier()
   n4=Identifier()
   n6="{" { n5 = JTBToolkit.makeNodeToken(n6); }
   (
      n8=Substitution()
      { n7.addNode(n8); }
   )*
   { n7.nodes.trimToSize(); }
   n10="}" { n9 = JTBToolkit.makeNodeToken(n10); }
   (
      { n12 = new NodeSequence(2); }
      n14="$" { n13 = JTBToolkit.makeNodeToken(n14); }
      { n12.addNode(n13); }
      n15=Identifier()
      { n12.addNode(n15); }
      { n11.addNode(n12); }
   )?
   
   { return new Transform(n0,n2,n3,n4,n5,n7,n9,n11); }
}

Substitution Substitution() :
{
   Identifier n0;
   NodeToken n1;
   Token n2;
   Identifier n3;

   {
   }
}
{
   n0=Identifier()
   n2="/" { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Identifier()
   
   { return new Substitution(n0,n1,n3); }
}

GSystem GSystem() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   Identifier n3;
   NodeToken n4;
   Token n5;
   NodeListOptional n6 = new NodeListOptional();
   Application n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeListOptional n12 = new NodeListOptional();
   Identifier n13;
   NodeToken n14;
   Token n15;

   {
   }
}
{
   n1="system" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n3=Identifier()
   n5="{" { n4 = JTBToolkit.makeNodeToken(n5); }
   (
      n7=Application()
      { n6.addNode(n7); }
   )*
   { n6.nodes.trimToSize(); }
   n9="}" { n8 = JTBToolkit.makeNodeToken(n9); }
   n11="<" { n10 = JTBToolkit.makeNodeToken(n11); }
   (
      n13=Identifier()
      { n12.addNode(n13); }
   )*
   { n12.nodes.trimToSize(); }
   n15=">" { n14 = JTBToolkit.makeNodeToken(n15); }
   
   { return new GSystem(n0,n2,n3,n4,n6,n8,n10,n12,n14); }
}

Application Application() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   Identifier n3;
   NodeOptional n4 = new NodeOptional();
   Path n5;
   Identifier n6;

   {
   }
}
{
   n1="apply" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n3=Identifier()
   (
      n5=Path()
      { n4.addNode(n5); }
   )?
   n6=Identifier()
   
   { return new Application(n0,n2,n3,n4,n6); }
}

Form Form() :
{
   NodeToken n0;
   Token n1;
   Identifier n2;
   NodeToken n3;
   Token n4;
   NodeListOptional n5 = new NodeListOptional();
   Identifier n6;
   NodeToken n7;
   Token n8;
   Expression n9;

   {
   }
}
{
   n1="form" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Identifier()
   n4="[" { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n6=Identifier()
      { n5.addNode(n6); }
   )*
   { n5.nodes.trimToSize(); }
   n8="]" { n7 = JTBToolkit.makeNodeToken(n8); }
   n9=Expression()
   
   { return new Form(n0,n2,n3,n5,n7,n9); }
}

Expression Expression() :
{
   NodeChoice n0;
   Identifier n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Expression n5;
   Expression n6;
   NodeToken n7;
   Token n8;

   {
   }
}
{
   (
      n1=Identifier()
      { n0 = new NodeChoice(n1, 0); }
   |
      { n2 = new NodeSequence(4); }
      n4="(" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Expression()
      { n2.addNode(n5); }
      n6=Expression()
      { n2.addNode(n6); }
      n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n2.addNode(n7); }
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new Expression(n0); }
}

Path Path() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<PATH> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Path(n0); }
}

Identifier Identifier() :
{
   NodeToken n0;
   Token n1;

   {
   }
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Identifier(n0); }
}
