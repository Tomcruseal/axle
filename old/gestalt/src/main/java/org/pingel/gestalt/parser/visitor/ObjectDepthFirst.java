//
// Generated by JTB 1.2.2
//

package org.pingel.gestalt.parser.visitor;
import java.util.Enumeration;

import org.pingel.gestalt.parser.syntaxtree.Application;
import org.pingel.gestalt.parser.syntaxtree.Expression;
import org.pingel.gestalt.parser.syntaxtree.Form;
import org.pingel.gestalt.parser.syntaxtree.GSystem;
import org.pingel.gestalt.parser.syntaxtree.Goal;
import org.pingel.gestalt.parser.syntaxtree.Identifier;
import org.pingel.gestalt.parser.syntaxtree.Include;
import org.pingel.gestalt.parser.syntaxtree.Node;
import org.pingel.gestalt.parser.syntaxtree.NodeList;
import org.pingel.gestalt.parser.syntaxtree.NodeListOptional;
import org.pingel.gestalt.parser.syntaxtree.NodeOptional;
import org.pingel.gestalt.parser.syntaxtree.NodeSequence;
import org.pingel.gestalt.parser.syntaxtree.NodeToken;
import org.pingel.gestalt.parser.syntaxtree.Path;
import org.pingel.gestalt.parser.syntaxtree.Statement;
import org.pingel.gestalt.parser.syntaxtree.Substitution;
import org.pingel.gestalt.parser.syntaxtree.Transform;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class ObjectDepthFirst implements ObjectVisitor {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public Object visit(NodeList n, Object argu) {
      Object _ret=null;
      int _count=0;
      for ( Enumeration e = n.elements(); e.hasMoreElements(); ) {
         ((Node)e.nextElement()).accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public Object visit(NodeListOptional n, Object argu) {
      if ( n.present() ) {
         Object _ret=null;
         int _count=0;
         for ( Enumeration e = n.elements(); e.hasMoreElements(); ) {
            ((Node)e.nextElement()).accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public Object visit(NodeOptional n, Object argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public Object visit(NodeSequence n, Object argu) {
      Object _ret=null;
      int _count=0;
      for ( Enumeration e = n.elements(); e.hasMoreElements(); ) {
         ((Node)e.nextElement()).accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public Object visit(NodeToken n, Object argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ( Statement() )*
    * f1 -> <EOF>
    */
   public Object visit(Goal n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Transform()
    *       | GSystem()
    *       | Form()
    *       | Include()
    */
   public Object visit(Statement n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "include"
    * f1 -> Identifier()
    */
   public Object visit(Include n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "transform"
    * f1 -> Identifier()
    * f2 -> Identifier()
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( Substitution() )*
    * f6 -> "}"
    * f7 -> ( "$" Identifier() )?
    */
   public Object visit(Transform n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "/"
    * f2 -> Identifier()
    */
   public Object visit(Substitution n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "system"
    * f1 -> Identifier()
    * f2 -> Identifier()
    * f3 -> "{"
    * f4 -> ( Application() )*
    * f5 -> "}"
    * f6 -> "<"
    * f7 -> ( Identifier() )*
    * f8 -> ">"
    */
   public Object visit(GSystem n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "apply"
    * f1 -> Identifier()
    * f2 -> Identifier()
    * f3 -> ( Path() )?
    * f4 -> Identifier()
    */
   public Object visit(Application n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "form"
    * f1 -> Identifier()
    * f2 -> "["
    * f3 -> ( Identifier() )*
    * f4 -> "]"
    * f5 -> Expression()
    */
   public Object visit(Form n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    *       | "(" Expression() Expression() ")"
    */
   public Object visit(Expression n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <PATH>
    */
   public Object visit(Path n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public Object visit(Identifier n, Object argu) {
      Object _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

}
